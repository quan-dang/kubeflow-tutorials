apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: producers-to-consumers-pipeline-
  annotations: {pipelines.kubeflow.org/kfp_sdk_version: 1.6.3, pipelines.kubeflow.org/pipeline_compilation_time: '2022-02-13T09:56:33.902195',
    pipelines.kubeflow.org/pipeline_spec: '{"description": "Pipeline that passes data
      from producer to consumer", "inputs": [{"default": "Hello world", "name": "text",
      "optional": true, "type": "String"}], "name": "Producers to consumers pipeline"}'}
  labels: {pipelines.kubeflow.org/kfp_sdk_version: 1.6.3}
spec:
  entrypoint: producers-to-consumers-pipeline
  templates:
  - name: consume-two-arguments
    container:
      args: [--text, '{{inputs.parameters.produce-one-small-output-Output}}', --number,
        '42']
      command:
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        printf "%s" "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - |
        def consume_two_arguments(text, number):
            print('Text={}'.format(text))
            print('Number={}'.format(str(number)))

        import argparse
        _parser = argparse.ArgumentParser(prog='Consume two arguments', description='')
        _parser.add_argument("--text", dest="text", type=str, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("--number", dest="number", type=int, required=True, default=argparse.SUPPRESS)
        _parsed_args = vars(_parser.parse_args())

        _outputs = consume_two_arguments(**_parsed_args)
      image: python:3.7
    inputs:
      parameters:
      - {name: produce-one-small-output-Output}
    metadata:
      labels: {pipelines.kubeflow.org/kfp_sdk_version: 1.6.3, pipelines.kubeflow.org/pipeline-sdk-type: kfp}
      annotations: {pipelines.kubeflow.org/component_spec: '{"implementation": {"container":
          {"args": ["--text", {"inputValue": "text"}, "--number", {"inputValue": "number"}],
          "command": ["sh", "-ec", "program_path=$(mktemp)\nprintf \"%s\" \"$0\" >
          \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n", "def consume_two_arguments(text,
          number):\n    print(''Text={}''.format(text))\n    print(''Number={}''.format(str(number)))\n\nimport
          argparse\n_parser = argparse.ArgumentParser(prog=''Consume two arguments'',
          description='''')\n_parser.add_argument(\"--text\", dest=\"text\", type=str,
          required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--number\",
          dest=\"number\", type=int, required=True, default=argparse.SUPPRESS)\n_parsed_args
          = vars(_parser.parse_args())\n\n_outputs = consume_two_arguments(**_parsed_args)\n"],
          "image": "python:3.7"}}, "inputs": [{"name": "text", "type": "String"},
          {"name": "number", "type": "Integer"}], "name": "Consume two arguments"}',
        pipelines.kubeflow.org/component_ref: '{}', pipelines.kubeflow.org/arguments.parameters: '{"number":
          "42", "text": "{{inputs.parameters.produce-one-small-output-Output}}"}'}
  - name: consume-two-arguments-2
    container:
      args: [--text, '{{inputs.parameters.text}}', --number, '{{inputs.parameters.produce-two-small-outputs-number}}']
      command:
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        printf "%s" "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - |
        def consume_two_arguments(text, number):
            print('Text={}'.format(text))
            print('Number={}'.format(str(number)))

        import argparse
        _parser = argparse.ArgumentParser(prog='Consume two arguments', description='')
        _parser.add_argument("--text", dest="text", type=str, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("--number", dest="number", type=int, required=True, default=argparse.SUPPRESS)
        _parsed_args = vars(_parser.parse_args())

        _outputs = consume_two_arguments(**_parsed_args)
      image: python:3.7
    inputs:
      parameters:
      - {name: produce-two-small-outputs-number}
      - {name: text}
    metadata:
      labels: {pipelines.kubeflow.org/kfp_sdk_version: 1.6.3, pipelines.kubeflow.org/pipeline-sdk-type: kfp}
      annotations: {pipelines.kubeflow.org/component_spec: '{"implementation": {"container":
          {"args": ["--text", {"inputValue": "text"}, "--number", {"inputValue": "number"}],
          "command": ["sh", "-ec", "program_path=$(mktemp)\nprintf \"%s\" \"$0\" >
          \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n", "def consume_two_arguments(text,
          number):\n    print(''Text={}''.format(text))\n    print(''Number={}''.format(str(number)))\n\nimport
          argparse\n_parser = argparse.ArgumentParser(prog=''Consume two arguments'',
          description='''')\n_parser.add_argument(\"--text\", dest=\"text\", type=str,
          required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--number\",
          dest=\"number\", type=int, required=True, default=argparse.SUPPRESS)\n_parsed_args
          = vars(_parser.parse_args())\n\n_outputs = consume_two_arguments(**_parsed_args)\n"],
          "image": "python:3.7"}}, "inputs": [{"name": "text", "type": "String"},
          {"name": "number", "type": "Integer"}], "name": "Consume two arguments"}',
        pipelines.kubeflow.org/component_ref: '{}', pipelines.kubeflow.org/arguments.parameters: '{"number":
          "{{inputs.parameters.produce-two-small-outputs-number}}", "text": "{{inputs.parameters.text}}"}'}
  - name: consume-two-arguments-3
    container:
      args: [--text, '{{inputs.parameters.produce-two-small-outputs-text}}', --number,
        '{{inputs.parameters.produce-two-small-outputs-number}}']
      command:
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        printf "%s" "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - |
        def consume_two_arguments(text, number):
            print('Text={}'.format(text))
            print('Number={}'.format(str(number)))

        import argparse
        _parser = argparse.ArgumentParser(prog='Consume two arguments', description='')
        _parser.add_argument("--text", dest="text", type=str, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("--number", dest="number", type=int, required=True, default=argparse.SUPPRESS)
        _parsed_args = vars(_parser.parse_args())

        _outputs = consume_two_arguments(**_parsed_args)
      image: python:3.7
    inputs:
      parameters:
      - {name: produce-two-small-outputs-number}
      - {name: produce-two-small-outputs-text}
    metadata:
      labels: {pipelines.kubeflow.org/kfp_sdk_version: 1.6.3, pipelines.kubeflow.org/pipeline-sdk-type: kfp}
      annotations: {pipelines.kubeflow.org/component_spec: '{"implementation": {"container":
          {"args": ["--text", {"inputValue": "text"}, "--number", {"inputValue": "number"}],
          "command": ["sh", "-ec", "program_path=$(mktemp)\nprintf \"%s\" \"$0\" >
          \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n", "def consume_two_arguments(text,
          number):\n    print(''Text={}''.format(text))\n    print(''Number={}''.format(str(number)))\n\nimport
          argparse\n_parser = argparse.ArgumentParser(prog=''Consume two arguments'',
          description='''')\n_parser.add_argument(\"--text\", dest=\"text\", type=str,
          required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--number\",
          dest=\"number\", type=int, required=True, default=argparse.SUPPRESS)\n_parsed_args
          = vars(_parser.parse_args())\n\n_outputs = consume_two_arguments(**_parsed_args)\n"],
          "image": "python:3.7"}}, "inputs": [{"name": "text", "type": "String"},
          {"name": "number", "type": "Integer"}], "name": "Consume two arguments"}',
        pipelines.kubeflow.org/component_ref: '{}', pipelines.kubeflow.org/arguments.parameters: '{"number":
          "{{inputs.parameters.produce-two-small-outputs-number}}", "text": "{{inputs.parameters.produce-two-small-outputs-text}}"}'}
  - name: produce-one-small-output
    container:
      args: ['----output-paths', /tmp/outputs/Output/data]
      command:
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        printf "%s" "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - |
        def produce_one_small_output():
            return 'Hello world'

        def _serialize_str(str_value: str) -> str:
            if not isinstance(str_value, str):
                raise TypeError('Value "{}" has type "{}" instead of str.'.format(str(str_value), str(type(str_value))))
            return str_value

        import argparse
        _parser = argparse.ArgumentParser(prog='Produce one small output', description='')
        _parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=1)
        _parsed_args = vars(_parser.parse_args())
        _output_files = _parsed_args.pop("_output_paths", [])

        _outputs = produce_one_small_output(**_parsed_args)

        _outputs = [_outputs]

        _output_serializers = [
            _serialize_str,

        ]

        import os
        for idx, output_file in enumerate(_output_files):
            try:
                os.makedirs(os.path.dirname(output_file))
            except OSError:
                pass
            with open(output_file, 'w') as f:
                f.write(_output_serializers[idx](_outputs[idx]))
      image: python:3.7
    outputs:
      parameters:
      - name: produce-one-small-output-Output
        valueFrom: {path: /tmp/outputs/Output/data}
      artifacts:
      - {name: produce-one-small-output-Output, path: /tmp/outputs/Output/data}
    metadata:
      labels: {pipelines.kubeflow.org/kfp_sdk_version: 1.6.3, pipelines.kubeflow.org/pipeline-sdk-type: kfp}
      annotations: {pipelines.kubeflow.org/component_spec: '{"implementation": {"container":
          {"args": ["----output-paths", {"outputPath": "Output"}], "command": ["sh",
          "-ec", "program_path=$(mktemp)\nprintf \"%s\" \"$0\" > \"$program_path\"\npython3
          -u \"$program_path\" \"$@\"\n", "def produce_one_small_output():\n    return
          ''Hello world''\n\ndef _serialize_str(str_value: str) -> str:\n    if not
          isinstance(str_value, str):\n        raise TypeError(''Value \"{}\" has
          type \"{}\" instead of str.''.format(str(str_value), str(type(str_value))))\n    return
          str_value\n\nimport argparse\n_parser = argparse.ArgumentParser(prog=''Produce
          one small output'', description='''')\n_parser.add_argument(\"----output-paths\",
          dest=\"_output_paths\", type=str, nargs=1)\n_parsed_args = vars(_parser.parse_args())\n_output_files
          = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = produce_one_small_output(**_parsed_args)\n\n_outputs
          = [_outputs]\n\n_output_serializers = [\n    _serialize_str,\n\n]\n\nimport
          os\nfor idx, output_file in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n    except
          OSError:\n        pass\n    with open(output_file, ''w'') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"],
          "image": "python:3.7"}}, "name": "Produce one small output", "outputs":
          [{"name": "Output", "type": "String"}]}', pipelines.kubeflow.org/component_ref: '{}'}
  - name: produce-two-small-outputs
    container:
      args: ['----output-paths', /tmp/outputs/text/data, /tmp/outputs/number/data]
      command:
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        printf "%s" "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - |
        def produce_two_small_outputs():
            return ("data 1", 42)

        def _serialize_int(int_value: int) -> str:
            if isinstance(int_value, str):
                return int_value
            if not isinstance(int_value, int):
                raise TypeError('Value "{}" has type "{}" instead of int.'.format(str(int_value), str(type(int_value))))
            return str(int_value)

        def _serialize_str(str_value: str) -> str:
            if not isinstance(str_value, str):
                raise TypeError('Value "{}" has type "{}" instead of str.'.format(str(str_value), str(type(str_value))))
            return str_value

        import argparse
        _parser = argparse.ArgumentParser(prog='Produce two small outputs', description='')
        _parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=2)
        _parsed_args = vars(_parser.parse_args())
        _output_files = _parsed_args.pop("_output_paths", [])

        _outputs = produce_two_small_outputs(**_parsed_args)

        _output_serializers = [
            _serialize_str,
            _serialize_int,

        ]

        import os
        for idx, output_file in enumerate(_output_files):
            try:
                os.makedirs(os.path.dirname(output_file))
            except OSError:
                pass
            with open(output_file, 'w') as f:
                f.write(_output_serializers[idx](_outputs[idx]))
      image: python:3.7
    outputs:
      parameters:
      - name: produce-two-small-outputs-number
        valueFrom: {path: /tmp/outputs/number/data}
      - name: produce-two-small-outputs-text
        valueFrom: {path: /tmp/outputs/text/data}
      artifacts:
      - {name: produce-two-small-outputs-number, path: /tmp/outputs/number/data}
      - {name: produce-two-small-outputs-text, path: /tmp/outputs/text/data}
    metadata:
      labels: {pipelines.kubeflow.org/kfp_sdk_version: 1.6.3, pipelines.kubeflow.org/pipeline-sdk-type: kfp}
      annotations: {pipelines.kubeflow.org/component_spec: '{"implementation": {"container":
          {"args": ["----output-paths", {"outputPath": "text"}, {"outputPath": "number"}],
          "command": ["sh", "-ec", "program_path=$(mktemp)\nprintf \"%s\" \"$0\" >
          \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n", "def produce_two_small_outputs():\n    return
          (\"data 1\", 42)\n\ndef _serialize_int(int_value: int) -> str:\n    if isinstance(int_value,
          str):\n        return int_value\n    if not isinstance(int_value, int):\n        raise
          TypeError(''Value \"{}\" has type \"{}\" instead of int.''.format(str(int_value),
          str(type(int_value))))\n    return str(int_value)\n\ndef _serialize_str(str_value:
          str) -> str:\n    if not isinstance(str_value, str):\n        raise TypeError(''Value
          \"{}\" has type \"{}\" instead of str.''.format(str(str_value), str(type(str_value))))\n    return
          str_value\n\nimport argparse\n_parser = argparse.ArgumentParser(prog=''Produce
          two small outputs'', description='''')\n_parser.add_argument(\"----output-paths\",
          dest=\"_output_paths\", type=str, nargs=2)\n_parsed_args = vars(_parser.parse_args())\n_output_files
          = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = produce_two_small_outputs(**_parsed_args)\n\n_output_serializers
          = [\n    _serialize_str,\n    _serialize_int,\n\n]\n\nimport os\nfor idx,
          output_file in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n    except
          OSError:\n        pass\n    with open(output_file, ''w'') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"],
          "image": "python:3.7"}}, "name": "Produce two small outputs", "outputs":
          [{"name": "text", "type": "String"}, {"name": "number", "type": "Integer"}]}',
        pipelines.kubeflow.org/component_ref: '{}'}
  - name: producers-to-consumers-pipeline
    inputs:
      parameters:
      - {name: text}
    dag:
      tasks:
      - name: consume-two-arguments
        template: consume-two-arguments
        dependencies: [produce-one-small-output]
        arguments:
          parameters:
          - {name: produce-one-small-output-Output, value: '{{tasks.produce-one-small-output.outputs.parameters.produce-one-small-output-Output}}'}
      - name: consume-two-arguments-2
        template: consume-two-arguments-2
        dependencies: [produce-two-small-outputs]
        arguments:
          parameters:
          - {name: produce-two-small-outputs-number, value: '{{tasks.produce-two-small-outputs.outputs.parameters.produce-two-small-outputs-number}}'}
          - {name: text, value: '{{inputs.parameters.text}}'}
      - name: consume-two-arguments-3
        template: consume-two-arguments-3
        dependencies: [produce-two-small-outputs]
        arguments:
          parameters:
          - {name: produce-two-small-outputs-number, value: '{{tasks.produce-two-small-outputs.outputs.parameters.produce-two-small-outputs-number}}'}
          - {name: produce-two-small-outputs-text, value: '{{tasks.produce-two-small-outputs.outputs.parameters.produce-two-small-outputs-text}}'}
      - {name: produce-one-small-output, template: produce-one-small-output}
      - {name: produce-two-small-outputs, template: produce-two-small-outputs}
  arguments:
    parameters:
    - {name: text, value: Hello world}
  serviceAccountName: pipeline-runner
